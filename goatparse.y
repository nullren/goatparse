%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2016-03-15 19:32:44.243395002 -0700 PDT
//
//  $ /Users/ren/local/src/goatparse/go/bin/ebnf2y -pkg gen -start Goatparse goatparse.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package gen //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	DAY
%token	FORTNIGHT
%token	HOUR
%token	INTEGER
%token	MINUTE
%token	SECOND
%token	WEEK

%type	<item> 	/*TODO real type(s), if/where applicable */
	DAY
	FORTNIGHT
	HOUR
	INTEGER
	MINUTE
	SECOND
	WEEK

%type	<item> 	/*TODO real type(s), if/where applicable */
	Decrement
	Duration
	Duration1
	Goatparse
	Goatparse1
	Goatparse11
	Increment
	Start

/*TODO %left, %right, ... declarations */

%start Start

%%

Decrement:
	'-' Duration
	{
		$$ = []Decrement{"-", $2} //TODO 1
	}

Duration:
	INTEGER Duration1
	{
		$$ = []Duration{$1, $2} //TODO 2
	}

Duration1:
	SECOND
	{
		$$ = $1 //TODO 3
	}
|	MINUTE
	{
		$$ = $1 //TODO 4
	}
|	HOUR
	{
		$$ = $1 //TODO 5
	}
|	DAY
	{
		$$ = $1 //TODO 6
	}
|	WEEK
	{
		$$ = $1 //TODO 7
	}
|	FORTNIGHT
	{
		$$ = $1 //TODO 8
	}

Goatparse:
	Duration Goatparse1
	{
		$$ = []Goatparse{$1, $2} //TODO 9
	}

Goatparse1:
	/* EMPTY */
	{
		$$ = []Goatparse1(nil) //TODO 10
	}
|	Goatparse1 Goatparse11
	{
		$$ = append($1.([]Goatparse1), $2) //TODO 11
	}

Goatparse11:
	Increment
	{
		$$ = $1 //TODO 12
	}
|	Decrement
	{
		$$ = $1 //TODO 13
	}

Increment:
	'+' Duration
	{
		$$ = []Increment{"+", $2} //TODO 14
	}

Start:
	Goatparse
	{
		_parserResult = $1 //TODO 15
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	Decrement interface{}
	Duration interface{}
	Duration1 interface{}
	Goatparse interface{}
	Goatparse1 interface{}
	Goatparse11 interface{}
	Increment interface{}
	Start interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
